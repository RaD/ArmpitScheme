==========
Реализация
==========

Введение
--------

Интерпретатор *Armpit Scheme* написан на ARM ассемблере с
использованием расширений (ARM и THUMB-2) для ядер `ARM7TDMI`_,
ARM920T, ARM966E, ARM926EJ, Cortex-M3 и Cortex A8 (архитектуры ARMv4T,
ARMv5TEJ и ARMv7M). Относящаяся к ARM часть инструкций ассемблера
описана `здесь <http://www.arm.com/documentation/Instruction_Set>`_,
`здесь <http://www.simplemachines.it/doc/QRC0001H_rvct_v2.1_arm.pdf>`_
и в техническом руководстве на ядро ARM7DMI доступном `здесь
<http://www.arm.com/documentation/ARMProcessor_Cores>`_.

.. _ARM7TDMI: http://www.arm.com/products/CPUs/ARM7TDMI.html


Исходный код интерпретатора *Armpit Scheme* состоит из 1 главного
конфигурационного файла, 13 общих файлов и до 6 файлов, относящихся к
конкретному микроконтроллёру::

    Main Configuration File:    armpit_050.s

    Common Files:               armpit_as_constants.s
                                armpit_as_macros.s
                                armpit_reset_ARM.s
                                armpit_reset_CM3.s
                                armpit_init.s
                                armpit_core.s
                                armpit_port.s
                                armpit_scheme_base.s
                                armpit_scheme_base_6.2.Integers.s
                                armpit_scheme_base_6.2.Numbers.s
                                armpit_scheme_base_library.s
                                armpit_scheme_base_r6rs_library.s
                                armpit_scheme_read_write.s

    MCU-Specific Files:         [BOARD].h
                                [FAMILY].h
                                [FAMILY]_startup.s
                                [FAMILY]_init_io.s
                                [FAMILY]_usb.s
                                [FAMILY]_system_0.s

Основной конфигурационный файл используется для определения платы, под
которую производится сборка интерпретатора, её идентификатор (для
управления I2C, если шина присутствует) и основных параметров:

1. способ сборки мусора;
2. размещения хранилища;
3. r6rs расширения (например, ``fx+``, ``fx-``);
4. подключение system 0;
5. подключение поддержки шины I2C;
6. управление выделением памяти;
7. тип окружения высокого уровня;
8. исключение неосновных функций;
9. исключение нецелочисленной математики;
10. сокращённое или обычное eval-apply;
11. исключение функций упаковки;
12. исключение макросов r5rs (r3rs опция).

Конфигурационный файл затем использует условные операторы и директивы
``.include`` для выбора необходимых компонентов интерпретатора при
сборке проекта. Затем происходит сборка встроенного окружения для
схемы (метка ``scmenv:``) в виде вектора, который объединяет
субокружения, определённые в общих файлах (см. далее), определяет
таблицу общих функций (метка ``paptbl:``, см. далее) и также содержит
код для управления светодиодами на плате (используются для отображения
состояний, включая ошибки).

Общие файлы содержат блок кода, который реализует независимую от типа
микроконтроллёра логику. Файл ``armpit_as_constants.s`` определяет
метки, используемые для кодирования типов данных, основные константы
(``#t``, ``#f``, ``#null``, ``scheme_inf``, ``backspace_char``, ...),
индексы типов данных, индексы точек входа в функции, наименование
регистров, расположение и/или размеры и/или индексы системного стека,
буферов и куч, адресов секций основной программы, режимы работы
процессора. Файл ``armpit_as_macros.s`` определяет макросы,
используемые в исходном коде интерпретатора и облегчающие его
восприятие (например, макрос ``set`` реализует инструкцию
``mov``). Файлы ``armpit_reset_ARM.s`` и ``armpit_reset_CM3.s``
содержат код, который обычно располагается по адресу ``0x00`` в
пространстве кода ARM для микроконтроллёров ARM и Cortex-M3
соответственно (один из файлов подключается при сборке проекта, в
зависимости от типа используемого микроконтроллёра). Соответствующий
код исполняется при системном сбросе процессора, он настраивает стеки
системы и определяет расположение обработчиков прерываний. Файл
``armpit_init.s`` завершает инициализацию аппаратной части и
инициализирует интерпретатор. Он вызывает процессоро-зависимую функцию
``hwinit``, код из ``[FAMILY]_init_io.s`` для настройки тактового
генератора и делителей частоты, запитывает периферию, настраивает
выводы микроконтроллёра и прерывания (например, UART). Затем
настраивается глобальный вектор интерпретатора, буферы, куча,
окружение, прерывания и запускается основной цикл интерпретатора
(Read-Eval-Print, REP), см. метку ``prgstr:`` в файле
``armpit_init.s``.

Файл ``armpit_core.s`` содержит внутренний функционал интерпретатора:
строчно-символьное сравнение и копирование (метки ``stsyeq:`` и
``subcpy:``), обработчики прерываний (метка ``genisr:``), сборщик
мусора (метки ``gc:`` и ``gc_bgn:``), выделение памяти (метки
``zmaloc:``, ``cons:``, ``save:``, ...), общие функции выхода (метки
``trufxt:``, ...), проверки типов (метка ``typchk:``), функционал
вычисления и обработки (метки ``eval:`` и ``apply:``), расширение
кадра окружения и поиск переменных (метки ``mkfrm:``, ``bndchk:``,
``vrnsrt:``), обработчики ошибок (метки ``catch:``, ``throw:``,
``error4``), версия и доступ к глобальному вектору (метки ``versn_:``
и ``_GLV:``), адрес объекта, упаковка и распаковка (метки ``padrof:``,
``punpak:``, ``ppack:``) и управление пользовательской библиотекой и
очисткой файловой системы (метки ``plibra:``, ``pexpor:``,
``pimpor:``, ``pfcln:``). В начале файла объявлено субокружение,
которое экспортируется в пространство пользователя. Экспортированные
объекты и функции (или формы) в этом субокружении: ``_winders``,
``_prg``, ``(throw ...)``, ``(gc)``, ``version``, ``(_GLV)``,
``(address-of ...)``, ``(packed-data-set! ...)``, ``(unpack ...)``,
``(pack ...)``, ``(library ...)``, ``(export ...)`` и ``(import
...)``. Обработчики скомпилированных функций также экспортируются для
поддержки компиляции пользовательских программ из пространства
пользователя: ``_catch``, ``_lkp``, ``_mkc``, ``_apl``, ``_dfv``,
``_alo``, ``_cns``, ``_sav``, ``_isx``, ``_ism``, ``_gc``, ``_err``.

Файл ``armpit_ports.s`` содержит функционал портов ввода-вывода,
который связывает уровень языка с уровнем железа. Определено до шести
типов портов (учитывается основной файл конфигурации и параметры
платы): файл, память, последоватеьный порт, USB, SD карта и шина
I2C. Код содержит функции для открытия и закрытия определённых портов
и для чтения из и записи в эти порты. Файл также содержит обработчики
прерывания (ISR), которые ветвятся от ``genisr:`` (в файле
``armpit_core.s``), для тех портов (UART, USB, I2C), которым требуются
прерывания (метки ``puaisr:``, ``pi2isr``, ``usbisr:``). Модели портов
(описаны далее) экспортируются в пространство пользователя через
субокружение портов, в начале файла, с помощью соответствующих
символов: ``FILE``, ``MEM``, ``UAR0``, ``UAR1``, ``USB``, ``SDFT``,
``I2C0`` и ``I2C1``.
